package com.yunma.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yunma.dao.UserInfos;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFOS".
*/
public class UserInfosDao extends AbstractDao<UserInfos, Long> {

    public static final String TABLENAME = "USER_INFOS";

    /**
     * Properties of entity UserInfos.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "userId");
        public final static Property PhoneNumber = new Property(2, String.class, "phoneNumber", false, "PhoneNumber");
        public final static Property PassWd = new Property(3, String.class, "passWd", false, "passWd");
        public final static Property ImgsPhotos = new Property(4, String.class, "imgsPhotos", false, "imgsPhotos");
        public final static Property IsAutoLogin = new Property(5, boolean.class, "isAutoLogin", false, "isAutoLogin");
        public final static Property NickName = new Property(6, String.class, "nickName", false, "nickName");
        public final static Property Gender = new Property(7, String.class, "gender", false, "gender");
        public final static Property RealName = new Property(8, String.class, "realName", false, "realName");
    }


    public UserInfosDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfosDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFOS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"userId\" INTEGER," + // 1: userId
                "\"PhoneNumber\" TEXT," + // 2: phoneNumber
                "\"passWd\" TEXT," + // 3: passWd
                "\"imgsPhotos\" TEXT," + // 4: imgsPhotos
                "\"isAutoLogin\" INTEGER NOT NULL ," + // 5: isAutoLogin
                "\"nickName\" TEXT," + // 6: nickName
                "\"gender\" TEXT," + // 7: gender
                "\"realName\" TEXT);"); // 8: realName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFOS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfos entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(3, phoneNumber);
        }
 
        String passWd = entity.getPassWd();
        if (passWd != null) {
            stmt.bindString(4, passWd);
        }
 
        String imgsPhotos = entity.getImgsPhotos();
        if (imgsPhotos != null) {
            stmt.bindString(5, imgsPhotos);
        }
        stmt.bindLong(6, entity.getIsAutoLogin() ? 1L: 0L);
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(7, nickName);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(8, gender);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(9, realName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfos entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(3, phoneNumber);
        }
 
        String passWd = entity.getPassWd();
        if (passWd != null) {
            stmt.bindString(4, passWd);
        }
 
        String imgsPhotos = entity.getImgsPhotos();
        if (imgsPhotos != null) {
            stmt.bindString(5, imgsPhotos);
        }
        stmt.bindLong(6, entity.getIsAutoLogin() ? 1L: 0L);
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(7, nickName);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(8, gender);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(9, realName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfos readEntity(Cursor cursor, int offset) {
        UserInfos entity = new UserInfos( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phoneNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // passWd
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imgsPhotos
            cursor.getShort(offset + 5) != 0, // isAutoLogin
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // nickName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // gender
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // realName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfos entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPhoneNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassWd(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImgsPhotos(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsAutoLogin(cursor.getShort(offset + 5) != 0);
        entity.setNickName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGender(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRealName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfos entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfos entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfos entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
