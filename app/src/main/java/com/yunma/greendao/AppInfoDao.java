package com.yunma.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yunma.dao.AppInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP_INFO".
*/
public class AppInfoDao extends AbstractDao<AppInfo, Long> {

    public static final String TABLENAME = "APP_INFO";

    /**
     * Properties of entity AppInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IsFirst = new Property(1, int.class, "isFirst", false, "isFirst");
        public final static Property IsLogin = new Property(2, int.class, "isLogin", false, "isLogin");
        public final static Property Token = new Property(3, String.class, "token", false, "token");
        public final static Property IsFirstSetting = new Property(4, int.class, "isFirstSetting", false, "isFirstSetting");
    }


    public AppInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AppInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"isFirst\" INTEGER NOT NULL ," + // 1: isFirst
                "\"isLogin\" INTEGER NOT NULL ," + // 2: isLogin
                "\"token\" TEXT," + // 3: token
                "\"isFirstSetting\" INTEGER NOT NULL );"); // 4: isFirstSetting
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AppInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsFirst());
        stmt.bindLong(3, entity.getIsLogin());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(4, token);
        }
        stmt.bindLong(5, entity.getIsFirstSetting());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AppInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsFirst());
        stmt.bindLong(3, entity.getIsLogin());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(4, token);
        }
        stmt.bindLong(5, entity.getIsFirstSetting());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AppInfo readEntity(Cursor cursor, int offset) {
        AppInfo entity = new AppInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // isFirst
            cursor.getInt(offset + 2), // isLogin
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // token
            cursor.getInt(offset + 4) // isFirstSetting
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AppInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsFirst(cursor.getInt(offset + 1));
        entity.setIsLogin(cursor.getInt(offset + 2));
        entity.setToken(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsFirstSetting(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AppInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AppInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AppInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
