package com.yunma.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yunma.dao.HistroySearch;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTROY_SEARCH".
*/
public class HistroySearchDao extends AbstractDao<HistroySearch, Long> {

    public static final String TABLENAME = "HISTROY_SEARCH";

    /**
     * Properties of entity HistroySearch.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property SearchNumber = new Property(1, String.class, "searchNumber", false, "searchNumber");
        public final static Property SearchTime = new Property(2, long.class, "searchTime", false, "searchTime");
        public final static Property LastUpdatasTime = new Property(3, long.class, "lastUpdatasTime", false, "lastUpdatasTime");
        public final static Property SearchTimes = new Property(4, int.class, "searchTimes", false, "searchTimes");
    }


    public HistroySearchDao(DaoConfig config) {
        super(config);
    }
    
    public HistroySearchDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTROY_SEARCH\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"searchNumber\" TEXT," + // 1: searchNumber
                "\"searchTime\" INTEGER NOT NULL ," + // 2: searchTime
                "\"lastUpdatasTime\" INTEGER NOT NULL ," + // 3: lastUpdatasTime
                "\"searchTimes\" INTEGER NOT NULL );"); // 4: searchTimes
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTROY_SEARCH\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistroySearch entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String searchNumber = entity.getSearchNumber();
        if (searchNumber != null) {
            stmt.bindString(2, searchNumber);
        }
        stmt.bindLong(3, entity.getSearchTime());
        stmt.bindLong(4, entity.getLastUpdatasTime());
        stmt.bindLong(5, entity.getSearchTimes());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistroySearch entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String searchNumber = entity.getSearchNumber();
        if (searchNumber != null) {
            stmt.bindString(2, searchNumber);
        }
        stmt.bindLong(3, entity.getSearchTime());
        stmt.bindLong(4, entity.getLastUpdatasTime());
        stmt.bindLong(5, entity.getSearchTimes());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HistroySearch readEntity(Cursor cursor, int offset) {
        HistroySearch entity = new HistroySearch( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // searchNumber
            cursor.getLong(offset + 2), // searchTime
            cursor.getLong(offset + 3), // lastUpdatasTime
            cursor.getInt(offset + 4) // searchTimes
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistroySearch entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSearchNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSearchTime(cursor.getLong(offset + 2));
        entity.setLastUpdatasTime(cursor.getLong(offset + 3));
        entity.setSearchTimes(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HistroySearch entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HistroySearch entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HistroySearch entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
